openapi: 3.0.0
info:
  title: User
  version: '1.0'
  description: Api used for operation that have something to do with a local User (besides updating User Anime and Forum information)
  contact:
    name: K. Ziej≈Ço
    email: kziejlo@gmail.com
servers:
  - url: 'http://localhost:3000'
tags:
  - name: keycloak
    description: The endpoint has something to do with a keycloak operation
  - name: profile
    description: The endpoint has something to do with a user profile
paths:
  /auth/login:
    post:
      summary: Login endpoint
      operationId: post-user-login
      tags:
        - keycloak
      responses:
        '200':
          description: OK - The login was successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationTokenDTO'
              examples:
                Successfull Login Example:
                  value:
                    accessToken: Access Token String
                    expiresIn: 3600
                    refreshToken: Refresh Token String
                    tokenType: Bearer
        '401':
          description: Unauthorized - The credentials were not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Credential Not Correct Error:
                  value:
                    message: Credentials not correct
                    status: 401
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentialsDTO'
            examples:
              Login Credentials Example:
                value:
                  username: username
                  password: pa$$word
        description: User data used to log in the user.
      description: Endpoint used to log in the user.
    parameters: []
  /auth/logout:
    post:
      summary: Logout endpoint
      operationId: post-auth-logout
      tags:
        - keycloak
      responses:
        '204':
          description: No Content - The user was logged out correctly
        '401':
          description: Unauthorized - The user didn't authenticate correctly or the logout was not correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Authentication Error Example:
                  value:
                    message: Authentication Error
                    status: 401
        '422':
          description: Unprocessable Entity - One/Both of the tokens are unprocessable (ex. are empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Unproccesable Entity Error Example:
                  value:
                    message: Authentication Error
                    status: 401
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDTO'
            examples:
              Refresh Token Example:
                value:
                  refreshToken: Refresh Token String
        description: The request body contains the refresh token used to refresh the access token.
      parameters:
        - schema:
            type: string
            minLength: 1
          in: header
          name: Authorization
          required: true
          description: The access token used to authenticate the user
      description: Endpoint used to log out the user
      security:
        - BearerToken: []
  /auth/refresh:
    post:
      summary: Refresh access token endpoint
      operationId: post-auth-refresh
      tags:
        - keycloak
      responses:
        '200':
          description: OK - The token was successfully refreshed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationTokenDTO'
              examples:
                Correct new Tokens Example:
                  value:
                    accessToken: Access Token String
                    expiresIn: 3600
                    refreshToken: Refresh Token String
                    tokenType: Bearer
        '401':
          description: Unauthorized - The user didn't authenticate correctly or the refresh token didn't work
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Authentication Error Example:
                  value:
                    message: Authentication Error
                    status: 401
      description: Endpoint used to refresh users access tokens
      security:
        - BearerToken: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenDTO'
            examples:
              Refresh Token Example:
                value:
                  refreshToken: Refresh Token String
        description: The request body contains the refresh token used to refresh the access token.
  /auth/register:
    post:
      summary: Registration endpoint
      operationId: post-auth-register
      tags:
        - keycloak
      responses:
        '200':
          description: OK - The user was created correctly in both services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationTokenDTO'
              examples:
                Authentication Token after Successfull Registration Example:
                  value:
                    accessToken: Access Token String
                    expiresIn: 3600
                    refreshToken: Refresh Token String
                    tokenType: Bearer
        '409':
          description: Conflict - The username or email is already taken
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Data Already Taken Error Example:
                  value:
                    message: string
                    status: 0
        '422':
          description: Unprocessable Entity - The passwords did not match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Unprocessable Entity Error Example:
                  value:
                    message: Error Message
                    status: 422
        '500':
          description: 'Internal Server Error - The user was correctly created in Keycloak, but not in local Database or some other error occurred.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Local Registration Error Example:
                  value:
                    message: registration Error Message
                    status: 500
                Other Error Example:
                  value:
                    message: Some Other Error Example
                    status: 500
      description: Endpoint used to register a new user in both the keycloak and local service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationBodyDTO'
            examples:
              Registration Body Example:
                value:
                  username: Username
                  password: Pa$$word
                  matchingPassword: Pa$$word
                  email: user@example.com
        description: Body containing data used for both keycloak and local services
  '/user/{userId}':
    parameters:
      - schema:
          type: string
          format: uuid
          minLength: 1
        name: userId
        in: path
        required: true
        description: ID of the user for which we request the profile
    get:
      summary: Get user profile Endpoint
      tags: [ profile ]
      responses:
        '200':
          description: OK - The user was found and a profile was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteUserDTO'
              examples:
                Successfull Example:
                  value:
                    userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                    username: Username
                    achievements:
                      - id: 5
                        name: Achievement Name
                        description: Achievement Description
                        icon:
                          - U3dhZ2dlciByb2Nrcw==
                          - U3dhZ2dlciByb2Nrcw==
                        points: 10
                        nrOfUsersPosses: 3
                    animeInfos:
                      - id:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          animeId: 195784
                        status: No Status
                        watchStartDate: '2019-08-24'
                        watchEndDate: '2019-08-24'
                        nrOfEpisodesSeen: 5
                        isFavourite: true
                        modification: '2019-08-24T14:15:22Z'
                        grade: 2
                        review:
                          reviewType: simpleReview
                          id: 1
                          title: The Review Title
                          text: The Review text
                          nrOfUpvotes: 10
                          nrOfDownvotes: 3
                          nrOfHelpfull: 8
                    threads:
                      - id: 8
                        title: Thread Title
                        nrOfPosts: 4
                        status: OPEN
                        creation: '2019-08-24T14:15:22Z'
                        modification: '2019-08-24T14:15:22Z'
                        creator:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          username: Username
                        category:
                          id: 15
                          name: Category Name
                          description: Category Description
                        tags:
                          - id: 9
                            name: Tag Name
                            importance: LOW
                            color: 'rgb(789, 654, 321)'
                        userStatus:
                          id:
                            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                            ThreadId: 8
                          watching: true
                          blocked: false
                    posts:
                      - id: 8
                        title: Post Title
                        text: Post Text
                        creation: '2019-08-24'
                        modification: '2019-08-26'
                        creator:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          username: Username
                        nrOfPlus: 6
                        nrOfMinus: 1
                        userStatus:
                          id:
                            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                            postId: 8
                          liked: true
                          disliked: false
                          reported: false
                      - threadInformation:
                          id: 7
                          title: Thread Title
        '404':
          description: Not Found - The user was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Not Found Error Example:
                  value:
                    message: Not Found Error
                    status: 404
      operationId: get-user-userId
      description: Endpoint used to get a complete user profile using their ID.
  /user/current:
    get:
      summary: Get current user profile Endpoint
      tags: [ profile ]
      responses:
        '200':
          description: OK - The profile was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteUserDTO'
              examples:
                Successfull Example:
                  value:
                    userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                    username: Username
                    achievements:
                      - id: 5
                        name: Achievement Name
                        description: Achievement Description
                        icon:
                          - U3dhZ2dlciByb2Nrcw==
                          - U3dhZ2dlciByb2Nrcw==
                        points: 10
                        nrOfUsersPosses: 3
                    animeInfos:
                      - id:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          animeId: 195784
                        status: No Status
                        watchStartDate: '2019-08-24'
                        watchEndDate: '2019-08-24'
                        nrOfEpisodesSeen: 5
                        isFavourite: true
                        modification: '2019-08-24T14:15:22Z'
                        grade: 2
                        review:
                          reviewType: simpleReview
                          id: 1
                          title: The Review Title
                          text: The Review text
                          nrOfUpvotes: 10
                          nrOfDownvotes: 3
                          nrOfHelpfull: 8
                    threads:
                      - id: 8
                        title: Thread Title
                        nrOfPosts: 4
                        status: OPEN
                        creation: '2019-08-24T14:15:22Z'
                        modification: '2019-08-24T14:15:22Z'
                        creator:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          username: Username
                        category:
                          id: 15
                          name: Category Name
                          description: Category Description
                        tags:
                          - id: 9
                            name: Tag Name
                            importance: LOW
                            color: 'rgb(789, 654, 321)'
                        userStatus:
                          id:
                            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                            ThreadId: 8
                          watching: true
                          blocked: false
                    posts:
                      - id: 8
                        title: Post Title
                        text: Post Text
                        creation: '2019-08-24'
                        modification: '2019-08-26'
                        creator:
                          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                          username: Username
                        nrOfPlus: 6
                        nrOfMinus: 1
                        userStatus:
                          id:
                            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                            postId: 8
                          liked: true
                          disliked: false
                          reported: false
                      - threadInformation:
                          id: 7
                          title: Thread Title
        '401':
          description: Unauthorized - The user didn't authenticate correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonModels_ErrorDTO'
              examples:
                Authentication Error Example:
                  value:
                    message: Authentication Error
                    status: 401
      operationId: get-user-current
      description: Endpoint to get the authenticated profile information
      security:
        - BearerToken: []
components:
  schemas:
    LoginCredentialsDTO:
      title: Login Credentials DTO
      type: object
      x-examples:
        Login Credentials Example:
          username: username
          password: pa$$word
      description: Class containing user credentials used to log in.
      properties:
        username:
          type: string
          minLength: 1
          description: The username
        password:
          type: string
          format: password
          description: The password. Is encrypted between comunnication
      required:
        - username
        - password
    AuthenticationTokenDTO:
      title: Authentication Token DTO
      type: object
      x-examples:
        Authentication Token Example:
          accessToken: Access Token String
          expiresIn: 3600
          refreshToken: Refresh Token String
          tokenType: Bearer
      description: Class containing necessery information to authenticate a user when requesting something from the backend. The access token needs to be renewed before it expires.
      properties:
        accessToken:
          type: string
          minLength: 1
          description: The bearer access token
        expiresIn:
          type: integer
          minimum: 1
          format: int32
          description: How long does the token stay valid
        refreshToken:
          type: string
          minLength: 1
          description: Token used to refresh the access token
        tokenType:
          type: string
          minLength: 1
          description: What type of token is the access token
      required:
        - accessToken
        - expiresIn
        - refreshToken
        - tokenType
    RefreshTokenDTO:
      title: Refresh Token DTO
      type: object
      x-examples:
        Refresh Token Example:
          refreshToken: Refresh Token String
      description: Class containing the refresh token. Used when refreshing the access token.
      properties:
        refreshToken:
          type: string
          minLength: 1
          description: Token used to refresh the access token
      required:
        - refreshToken
    RegistrationBodyDTO:
      title: Registration Body DTO
      type: object
      description: Class used to register a user in both keycloak and local service.
      properties:
        username:
          type: string
          minLength: 6
          description: The user's username
        password:
          type: string
          format: password
          minLength: 6
          description: The password
        matchingPassword:
          type: string
          format: password
          minLength: 6
          description: The matching password. Should be the same as the password field
        email:
          type: string
          format: email
          description: 'Email of the user, used to send an authentication email'
      required:
        - username
        - password
        - matchingPassword
        - email
      x-examples:
        Registration Body Example:
          username: Username
          password: Pa$$word
          matchingPassword: Pa$$word
          email: user@example.com
    CompleteUserDTO:
      title: Complete User DTO
      allOf:
        - $ref: '#/components/schemas/CommonModels_SimpleUserDTO'
      properties:
        achievements:
          description: Set containing some achievements of the user
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Achievement_AchievementDTO'
        animeInfos:
          description: Set containing some anime Information of the user
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Anime_LocalUserAnimeInformationDTO'
        threads:
          description: Set containing some threads created by the user
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Forum_SimpleThreadDTO'
        posts:
          description: Set containing some posts created by the user
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Forum_PostWithThreadInformationDTO'
      required:
        - achievements
        - animeInfos
        - threads
        - posts
      description: Class containg complete information on a user.
      x-examples:
        Complete User Example:
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          username: Username
          achievements:
            - id: 5
              name: Achievement Name
              description: Achievement Description
              icon:
                - byte 1
                - byte 2
              points: 10
              nrOfUsersPosses: 3
          animeInfos:
            - id:
                userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                animeId: 195784
              status: No Status
              watchStartDate: '2019-08-24'
              watchEndDate: '2019-08-24'
              nrOfEpisodesSeen: 5
              isFavourite: true
              modification: '2019-08-24T14:15:22Z'
              grade: 2
              review:
                reviewType: simpleReview
                id: 1
                title: The Review Title
                text: The Review text
                nrOfUpvotes: 10
                nrOfDownvotes: 3
                nrOfHelpfull: 8
          threads:
            - id: 8
              title: Thread Title
              nrOfPosts: 4
              status: OPEN
              creation: '2019-08-24T14:15:22Z'
              modification: '2019-08-24T14:15:22Z'
              creator:
                userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                username: Username
              category:
                id: 15
                name: Category Name
                description: Category Description
              tags:
                - id: 9
                  name: Tag Name
                  importance: LOW
                  color: 'rgb(789, 654, 321)'
              userStatus:
                id:
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  ThreadId: 8
                watching: true
                blocked: false
          posts:
            - id: 8
              title: Post Title
              text: Post Text
              creation: '2019-08-24'
              modification: '2019-08-26'
              creator:
                userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                username: Username
              nrOfPlus: 6
              nrOfMinus: 1
              userStatus:
                id:
                  userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                  postId: 8
                liked: true
                disliked: false
                reported: false
            - threadInformation:
                id: 7
                title: Thread Title
    Achievement_AchievementDTO:
      title: Achievement DTO
      type: object
      x-examples:
        Achievement Example:
          id: 5
          name: Achievement Name
          description: Achievement Description
          icon:
            - byte 1
            - byte 2
          points: 10
          nrOfUsersPosses: 3
      description: Class containg all necessery information on an Achievement.
      properties:
        id:
          $ref: '#/components/schemas/Achievement_AchievementId'
        name:
          type: string
          minLength: 1
          description: Name of the achievement
        description:
          type: string
          minLength: 1
          description: Description of the achievement
        icon:
          type: array
          minItems: 1
          description: Byte array containing the icon of the achievement
          items:
            type: string
            format: byte
        points:
          type: integer
          format: int32
          minimum: 1
          description: How many points does the achievement give
        nrOfUsersPosses:
          type: integer
          format: int64
          minimum: 0
          description: How many people posses the achievement
      required:
        - id
        - name
        - description
        - icon
        - points
        - nrOfUsersPosses
    Achievement_AchievementId:
      type: integer
      title: Achievement Id
      format: int64
      minimum: 0
      description: ID of the Achievement database entity
      x-examples:
        Achievement Id Example: 45
    Anime_AnimeId:
      type: integer
      title: Anime Id
      format: int64
      minimum: 0
      description: 'ID of the Anime, the same used in Anilist.'
      x-examples:
        Anime Id Example: 159753
    Anime_LocalSimpleAnimeReviewDTO:
      title: Simple Anime Review DTO
      type: object
      description: DTO for the Anime Review class.
      x-examples:
        Anime Review Example:
          reviewType: simpleReview
          id: 1
          title: The Review Title
          text: The Review text
          nrOfUpvotes: 10
          nrOfDownvotes: 3
          nrOfHelpfull: 8
      discriminator:
        propertyName: reviewType
        mapping:
          simpleReview: '#/components/schemas/LocalSimpleAnimeReviewDTO'
          detailedReview: '#/components/schemas/LocalDetailedAnimeReviewDTO'
      properties:
        reviewType:
          type: string
          enum:
            - simpleReview
            - detailedReview
          description: Discriminator for the Review DTO's
        id:
          type: integer
          format: int64
          minimum: 1
          description: Id of the review
        title:
          type: string
          maxLength: 100
          minLength: 10
          description: Title of the Review
        text:
          type: string
          minLength: 0
          maxLength: 300
          description: Text of the Review
        nrOfUpvotes:
          type: integer
          format: int32
          minimum: 0
          description: How many people upvoted the review
        nrOfDownvotes:
          type: integer
          format: int32
          minimum: 0
          description: How many people downvoted the review
        nrOfHelpfull:
          type: integer
          format: int32
          minimum: 0
          description: How many people found the review helpfull
      required:
        - reviewType
        - id
        - title
        - text
        - nrOfUpvotes
        - nrOfDownvotes
        - nrOfHelpfull
    Anime_LocalUserAnimeInformationDTO:
      title: UserAnimeInformationDTO
      type: object
      x-examples:
        User Anime Information Example:
          id:
            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
            animeId: 195784
          status: No Status
          watchStartDate: '2019-08-24'
          watchEndDate: '2019-08-24'
          nrOfEpisodesSeen: 5
          isFavourite: true
          modification: '2019-08-24T14:15:22Z'
          grade: 2
          review:
            reviewType: simpleReview
            id: 1
            title: The Review Title
            text: The Review text
            nrOfUpvotes: 10
            nrOfDownvotes: 3
            nrOfHelpfull: 8
      description: User's information on a selected Anime.
      properties:
        id:
          type: object
          description: Class containing basic information on a user
          required:
            - userId
            - animeId
          properties:
            userId:
              $ref: '#/components/schemas/CommonModels_UserID'
            animeId:
              $ref: '#/components/schemas/Anime_AnimeId'
        status:
          type: string
          enum:
            - No Status
            - Watching
            - Completed
            - Dropped
            - Plan to Watch
          description: Current User status on the Anime
        watchStartDate:
          type: string
          format: date
          description: When the User started watching the Anime
        watchEndDate:
          type: string
          format: date
          description: When the User finished watching the Anime
        nrOfEpisodesSeen:
          type: integer
          description: How many episodes did the User see
          format: int32
          minimum: 0
        isFavourite:
          type: boolean
          description: Did the User select the Anime as his/her favourite
        modification:
          type: string
          format: date-time
          description: Last time the information was modificated
        grade:
          type: integer
          minimum: 1
          maximum: 10
          exclusiveMinimum: false
          exclusiveMaximum: false
          description: Grade the User gave to the Anime. In scale from 1 to 10
        review:
          $ref: '#/components/schemas/Anime_LocalSimpleAnimeReviewDTO'
      required:
        - id
        - status
        - isFavourite
        - modification
    CommonModels_ErrorDTO:
      title: Error DTO
      type: object
      description: The DTO for backend errors.
      x-examples:
        Error Example:
          message: Error Message
          status: 503
      properties:
        message:
          type: string
          description: Translated error message
        status:
          type: integer
          description: The Error status
      required:
        - message
        - status
    CommonModels_SimpleUserDTO:
      title: Simple User DTO
      type: object
      description: Class containing basic information on a user
      x-examples:
        Simple User Example:
          userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
          username: Username
      properties:
        userId:
          $ref: '#/components/schemas/CommonModels_UserID'
        username:
          type: string
          description: 'ID of the Anime, the same used in Anilist.'
          minLength: 6
      required:
        - userId
        - username
    CommonModels_UserID:
      type: string
      title: User ID
      format: uuid
      description: 'User ID, same as in Keycloak'
      minLength: 36
      maxLength: 36
      x-examples:
        User Id Example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
    Forum_Color:
      type: string
      title: Color
      pattern: '/rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)/'
      description: Small schema that declared the color format
    Forum_ForumCategoryDTO:
      title: Forum Category DTO
      type: object
      description: Class containing information on a forum category.
      x-examples:
        Forum Category Example:
          id: 4
          name: Category Name
          description: Category Description
      properties:
        id:
          $ref: '#/components/schemas/Forum_ForumCategoryId'
        name:
          type: string
          minLength: 1
          maxLength: 45
          description: Forum Category name
        description:
          type: string
          maxLength: 150
          description: Foprum Category description
      required:
        - id
        - name
    Forum_ForumCategoryId:
      type: integer
      title: Forum Category Id
      format: int64
      minimum: 0
      description: ID of the Forum Category database entity
      x-examples:
        Forum Category Example: 14
    Forum_PostDTO:
      title: Post DTO
      type: object
      description: Class containing all necessery information on a user.
      x-examples:
        Post Example:
          id: 8
          title: Post Title
          text: Post Text
          creation: '2019-08-24'
          modification: '2019-08-26'
          creator:
            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
            username: Username
          nrOfLikes: 6
          nrOfDislikes: 1
          userStatus:
            id:
              userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
              postId: 8
            liked: true
            disliked: false
            reported: false
      properties:
        id:
          $ref: '#/components/schemas/Forum_PostId'
        title:
          type: string
          maxLength: 80
          description: Title of the post
        text:
          type: string
          maxLength: 600
          description: Text of the post
        creation:
          type: string
          format: date
          description: When was the post created
        modification:
          type: string
          format: date
          description: When was the post modificated
        creator:
          $ref: '#/components/schemas/CommonModels_SimpleUserDTO'
        nrOfLikes:
          type: integer
          format: int32
          minimum: 0
          description: How many people liked the post
        nrOfDislikes:
          type: integer
          format: int32
          minimum: 0
          description: How many people disliked the post
        userStatus:
          $ref: '#/components/schemas/Forum_PostUserStatusDTO'
      required:
        - id
        - title
        - text
        - creation
        - modification
        - creator
        - nrOfLikes
        - nrOfDislikes
    Forum_PostId:
      type: integer
      title: Post Id
      format: int64
      minimum: 0
      x-examples:
        Post Id Example: 5
      description: Id of the Post database entity.
    Forum_PostUserStatusDTO:
      title: Post User Status DTO
      type: object
      description: Class containing the opinion of a user on a post.
      x-examples:
        Post User Status Example:
          id:
            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
            postId: 5
          liked: true
          disliked: false
          reported: false
      properties:
        id:
          type: object
          required:
            - userId
            - postId
          description: ID containing information to which post and user does the status reference
          properties:
            userId:
              $ref: '#/components/schemas/CommonModels_UserID'
            postId:
              $ref: '#/components/schemas/Forum_PostId'
        liked:
          type: boolean
          description: Does the user like the post
        disliked:
          type: boolean
          description: Does the user dislike the post
        reported:
          type: boolean
          description: Did the user report the post
      required:
        - id
        - liked
        - disliked
        - reported
    Forum_PostWithThreadInformationDTO:
      title: Post With Thread Information DTO
      type: object
      x-examples:
        Post With Thread Information Example:
          post:
            id: 8
            title: Post Title
            text: Post Text
            creation: '2019-08-24'
            modification: '2019-08-26'
            creator:
              userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
              username: Username
            nrOfPlus: 6
            nrOfMinus: 1
            userStatus:
              id:
                userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
                postId: 8
              liked: true
              disliked: false
              reported: false
          threadInformation:
            id: 7
            title: Thread Title
      description: Class containing complete post information with selected Thread Information.
      properties:
        post:
          $ref: '#/components/schemas/Forum_PostDTO'
        threadInformation:
          type: object
          required:
            - id
            - title
          description: Basic information on a Thread
          properties:
            id:
              $ref: '#/components/schemas/Forum_ThreadId'
            title:
              type: string
              minLength: 1
              description: Title of the thread
      required:
        - post
        - threadInformation
    Forum_SimpleThreadDTO:
      title: Simple Thread DTO
      type: object
      description: Class containing basic information on a thread.
      x-examples:
        Simple Thread Example:
          id: 8
          title: Thread Title
          nrOfPosts: 4
          status: OPEN
          creation: '2019-08-24T14:15:22Z'
          modification: '2019-08-24T14:15:22Z'
          creator:
            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
            username: Username
          category:
            id: 15
            name: Category Name
            description: Category Description
          tags:
            - id: 9
              name: Tag Name
              importance: LOW
              color: 'rgb(789, 654, 321)'
          userStatus:
            id:
              userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
              ThreadId: 8
            watching: true
            blocked: false
      properties:
        id:
          $ref: '#/components/schemas/Forum_ThreadId'
        title:
          type: string
          minLength: 1
          description: Title of the thread
        nrOfPosts:
          type: integer
          format: int32
          minimum: 0
          description: How many posts does the thread have
        status:
          $ref: '#/components/schemas/Forum_ThreadStatus'
        creation:
          type: string
          format: date-time
          description: When was the thread created
        modification:
          type: string
          format: date-time
          description: When was the thread modificated last time
        creator:
          $ref: '#/components/schemas/CommonModels_SimpleUserDTO'
        category:
          $ref: '#/components/schemas/Forum_ForumCategoryDTO'
        tags:
          type: array
          minItems: 1
          description: What does does the thread have
          items:
            $ref: '#/components/schemas/Forum_TagDTO'
        userStatus:
          $ref: '#/components/schemas/Forum_ThreadUserStatusDTO'
      required:
        - id
        - title
        - nrOfPosts
        - status
        - creation
        - modification
        - creator
        - category
        - tags
        - userStatus
    Forum_TagDTO:
      title: Tag DTO
      type: object
      description: Class containing information on a tag.
      x-examples:
        Tag Example:
          id: 5
          name: Tag Name
          importance: LOW
          color: 'rgb(458, 789, 321)'
      properties:
        id:
          $ref: '#/components/schemas/Forum_TagId'
        name:
          type: string
          minLength: 1
          maxLength: 45
          description: tag name
        importance:
          $ref: '#/components/schemas/Forum_TagImportance'
        color:
          $ref: '#/components/schemas/Forum_Color'
      required:
        - id
        - name
        - importance
        - color
    Forum_TagId:
      type: integer
      title: Tag Id
      description: Id of the Tag database entity.
      minimum: 0
      format: int64
    Forum_TagImportance:
      type: string
      title: Tag Importance
      enum:
        - LOW
        - MEDIUM
        - HIGH
        - ADMIN
      description: Enum containing the possible importance levels for tags.
      x-examples:
        Tag Importance Example: LOW
    Forum_ThreadId:
      type: integer
      title: Thread Id
      format: int64
      minimum: 0
      description: Id of the Thread database entity.
      x-examples:
        Thread Id Example: 5
    Forum_ThreadStatus:
      type: string
      title: ThreadStatus
      enum:
        - OPEN
        - CLOSED
      x-examples:
        Thread Status Example: OPEN
      description: Enum containing the possible thread statuses.
    Forum_ThreadUserStatusDTO:
      title: Thread User Status DTO
      type: object
      description: Class containing the opinion of a user on a thread.
      x-examples:
        Thread User Status Example:
          id:
            userId: 2c4a230c-5085-4924-a3e1-25fb4fc5965b
            threadId: 5
          watching: true
          blocked: false
      properties:
        id:
          type: object
          required:
            - userId
            - threadId
          description: ID containing information to which thread and user does the status reference
          properties:
            userId:
              $ref: '#/components/schemas/CommonModels_UserID'
            threadId:
              $ref: '#/components/schemas/Forum_ThreadId'
        watching:
          type: boolean
          description: Is the user watching the post
        blocked:
          type: boolean
          description: Did the user block the post
      required:
        - id
        - watching
        - blocked
  securitySchemes:
    BearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Uses a token created by Keykloak to authenticate the User. The token needs to be reloaded every 15 minutes
